// PlayerController

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour {

    private Rigidbody2D rb;
    public float speed;

    private void Start()
    {
        rb = GetComponent<Rigidbody2D>();
    }

    void Update()
    {
        Move();
    }

    void Move()
    {
        if (Input.GetKey(KeyCode.A))
        {
            rb.AddForce(-Vector2.right * speed);
        }
        if (Input.GetKey(KeyCode.D))
        {
            rb.AddForce(Vector2.right * speed);
        }
    }
}


// DragObject class
public class DragObject : MonoBehaviour {

Vector3 screenPoint;
Vector3 offset;
Vector3 scanPos;

Transform trans;

void Start()
{
	trans = this.transform;
	scanPos = trans.position;

	_sensitivity = 40f;
	_rotation = Vector3.zero;
}
void Update()
{
	SetDirection ();
}
void OnMouseDown()
{
	// rotating flag
	_isRotating = true;

	// store mouse
	_mouseReference = trans.position;

	screenPoint = Camera.main.WorldToScreenPoint(scanPos);

	offset = scanPos - Camera.main.ScreenToWorldPoint(
	new Vector3(Input.mousePosition.x, Input.mousePosition.y, screenPoint.z));

	SlingShotManager.instance.aimer.eulerAngles = new Vector3 (0,0,0);
	SlingShotManager.instance.setPath (true);
}
void OnMouseDrag()
{
	Vector3 curScreenPoint = new Vector3(Input.mousePosition.x, Input.mousePosition.y, screenPoint.z);
	Vector3 curPosition = Camera.main.ScreenToWorldPoint(curScreenPoint) + offset;
	trans.position = curPosition;??

	float posX = Mathf.Clamp (trans.position.x,-1.4f,1.4f);
	float posY = Mathf.Clamp (trans.position.y,-3f,-2.36f);

	trans.position = new Vector3 (posX,posY,curPosition.z);
}
void OnMouseUp()
{
	// rotating flag
	_isRotating = false;
	trans.position = scanPos;

	SlingShotManager.instance.throwBall ();
	Invoke ("ResetDirection",1f);
}
void ResetDirection()
{
	SlingShotManager.instance.aimer.eulerAngles = new Vector3 (0,0,0);
	SlingShotManager.instance.setPath (false);
	SlingShotManager.instance.ObjectHolder.GetComponent<Collider> ().enabled = true;
}

private float _sensitivity;
private Vector3 _mouseReference;
private Vector3 _mouseOffset;
private Vector3 _rotation;
private bool _isRotating;

void SetDirection()
{
	if(_isRotating)
	{
		// offset
		_mouseOffset = (trans.position - _mouseReference);

		// apply rotation
		_rotation.z = (_mouseOffset.x) * _sensitivity;

		// rotate
		SlingShotManager.instance.aimer.Rotate (_rotation);

		// store mouse
		_mouseReference = trans.position;
	}
}
}


//slingshotManager

public class SlingShotManager : MonoBehaviour {

public GameObject ball;
public Transform leftAnchor;
public Transform rightAnchor;

public Transform ObjectHolder;

public Transform aimer;

public LineRenderer[] lines;

public static SlingShotManager instance;

void Awake()
{
instance = this;
}

// Use this for initialization

void Start ()
{
lines [0].SetPosition (0, leftAnchor.position);
lines [1].SetPosition (0,rightAnchor.position);
setPath (true);
}

// Update is called once per frame

void Update ()	{
for (int i = 0; i < lines.Length; i++) {
lines [i].SetPosition (1,ObjectHolder.position);
}
}
public GameObject[] points;

public void setPath(bool b)
{
float yPos = (aimer.up.y * 50) / points.Length;
float val = yPos;
for (int i = 0; i < points.Length; i++) {
points [i].SetActive (b);
points [i].transform.parent = aimer;
points [i].transform.localPosition = new Vector3 (0,val,-0.8f);
val += yPos;
}
}

public float speed;
public void throwBall()
{
ObjectHolder.GetComponent<Collider> ().enabled = false;
GameObject clone = Instantiate (ball,ball.transform.position,Quaternion.identity)as GameObject;
clone.SetActive (true);
clone.GetComponent<Rigidbody> ().AddForce (aimer.up*speed,ForceMode.Impulse);
Destroy (clone,3f);
}
}



// Website : https://insights.nimblechapps.com/unity/how-to-implement-slingshot-in-unity
